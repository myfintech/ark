// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: event_sink_server.proto

package event_sink_server

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CanonicalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	ProjectId      string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	EventId        string `protobuf:"bytes,3,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	UserId         string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Verb           string `protobuf:"bytes,5,opt,name=verb,proto3" json:"verb,omitempty"`
	Method         string `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	Os             string `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	Version        string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	TrackerVersion string `protobuf:"bytes,9,opt,name=tracker_version,json=trackerVersion,proto3" json:"tracker_version,omitempty"`
	Metadata       string `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt      string `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *CanonicalEvent) Reset() {
	*x = CanonicalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sink_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanonicalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicalEvent) ProtoMessage() {}

func (x *CanonicalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_sink_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicalEvent.ProtoReflect.Descriptor instead.
func (*CanonicalEvent) Descriptor() ([]byte, []int) {
	return file_event_sink_server_proto_rawDescGZIP(), []int{0}
}

func (x *CanonicalEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *CanonicalEvent) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CanonicalEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *CanonicalEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CanonicalEvent) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *CanonicalEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CanonicalEvent) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *CanonicalEvent) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CanonicalEvent) GetTrackerVersion() string {
	if x != nil {
		return x.TrackerVersion
	}
	return ""
}

func (x *CanonicalEvent) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *CanonicalEvent) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type RecordCanonicalEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *RecordCanonicalEventResponse) Reset() {
	*x = RecordCanonicalEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_sink_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordCanonicalEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCanonicalEventResponse) ProtoMessage() {}

func (x *RecordCanonicalEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_sink_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCanonicalEventResponse.ProtoReflect.Descriptor instead.
func (*RecordCanonicalEventResponse) Descriptor() ([]byte, []int) {
	return file_event_sink_server_proto_rawDescGZIP(), []int{1}
}

func (x *RecordCanonicalEventResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_event_sink_server_proto protoreflect.FileDescriptor

var file_event_sink_server_proto_rawDesc = []byte{
	0x0a, 0x17, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xb4, 0x02, 0x0a,
	0x0e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x2e, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x32, 0x79, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x12, 0x6c, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x15,
	0x5a, 0x13, 0x2e, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_sink_server_proto_rawDescOnce sync.Once
	file_event_sink_server_proto_rawDescData = file_event_sink_server_proto_rawDesc
)

func file_event_sink_server_proto_rawDescGZIP() []byte {
	file_event_sink_server_proto_rawDescOnce.Do(func() {
		file_event_sink_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_sink_server_proto_rawDescData)
	})
	return file_event_sink_server_proto_rawDescData
}

var file_event_sink_server_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_event_sink_server_proto_goTypes = []interface{}{
	(*CanonicalEvent)(nil),               // 0: event_sink_server.CanonicalEvent
	(*RecordCanonicalEventResponse)(nil), // 1: event_sink_server.RecordCanonicalEventResponse
}
var file_event_sink_server_proto_depIdxs = []int32{
	0, // 0: event_sink_server.EventSink.RecordCanonicalEvent:input_type -> event_sink_server.CanonicalEvent
	1, // 1: event_sink_server.EventSink.RecordCanonicalEvent:output_type -> event_sink_server.RecordCanonicalEventResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_event_sink_server_proto_init() }
func file_event_sink_server_proto_init() {
	if File_event_sink_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_event_sink_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanonicalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_sink_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordCanonicalEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_sink_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_event_sink_server_proto_goTypes,
		DependencyIndexes: file_event_sink_server_proto_depIdxs,
		MessageInfos:      file_event_sink_server_proto_msgTypes,
	}.Build()
	File_event_sink_server_proto = out.File
	file_event_sink_server_proto_rawDesc = nil
	file_event_sink_server_proto_goTypes = nil
	file_event_sink_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventSinkClient is the client API for EventSink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSinkClient interface {
	RecordCanonicalEvent(ctx context.Context, in *CanonicalEvent, opts ...grpc.CallOption) (*RecordCanonicalEventResponse, error)
}

type eventSinkClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSinkClient(cc grpc.ClientConnInterface) EventSinkClient {
	return &eventSinkClient{cc}
}

func (c *eventSinkClient) RecordCanonicalEvent(ctx context.Context, in *CanonicalEvent, opts ...grpc.CallOption) (*RecordCanonicalEventResponse, error) {
	out := new(RecordCanonicalEventResponse)
	err := c.cc.Invoke(ctx, "/event_sink_server.EventSink/RecordCanonicalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventSinkServer is the server API for EventSink service.
type EventSinkServer interface {
	RecordCanonicalEvent(context.Context, *CanonicalEvent) (*RecordCanonicalEventResponse, error)
}

// UnimplementedEventSinkServer can be embedded to have forward compatible implementations.
type UnimplementedEventSinkServer struct {
}

func (*UnimplementedEventSinkServer) RecordCanonicalEvent(context.Context, *CanonicalEvent) (*RecordCanonicalEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordCanonicalEvent not implemented")
}

func RegisterEventSinkServer(s *grpc.Server, srv EventSinkServer) {
	s.RegisterService(&_EventSink_serviceDesc, srv)
}

func _EventSink_RecordCanonicalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanonicalEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSinkServer).RecordCanonicalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event_sink_server.EventSink/RecordCanonicalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSinkServer).RecordCanonicalEvent(ctx, req.(*CanonicalEvent))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event_sink_server.EventSink",
	HandlerType: (*EventSinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordCanonicalEvent",
			Handler:    _EventSink_RecordCanonicalEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_sink_server.proto",
}
