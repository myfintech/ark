// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: host_server.proto

package host_server

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// used for all log streams
type LogStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LogStreamResponse) Reset() {
	*x = LogStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStreamResponse) ProtoMessage() {}

func (x *LogStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStreamResponse.ProtoReflect.Descriptor instead.
func (*LogStreamResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{0}
}

func (x *LogStreamResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// used for aggregating target information
type Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	ShortHash      string `protobuf:"bytes,2,opt,name=short_hash,json=shortHash,proto3" json:"short_hash,omitempty"`
	Hash           string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	LocallyCached  bool   `protobuf:"varint,4,opt,name=locally_cached,json=locallyCached,proto3" json:"locally_cached,omitempty"`
	RemotelyCached bool   `protobuf:"varint,5,opt,name=remotely_cached,json=remotelyCached,proto3" json:"remotely_cached,omitempty"`
	Description    string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{1}
}

func (x *Target) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Target) GetShortHash() string {
	if x != nil {
		return x.ShortHash
	}
	return ""
}

func (x *Target) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Target) GetLocallyCached() bool {
	if x != nil {
		return x.LocallyCached
	}
	return false
}

func (x *Target) GetRemotelyCached() bool {
	if x != nil {
		return x.RemotelyCached
	}
	return false
}

func (x *Target) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ark add workspace -- does not exist yet
type AddWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *AddWorkspaceRequest) Reset() {
	*x = AddWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWorkspaceRequest) ProtoMessage() {}

func (x *AddWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*AddWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{2}
}

func (x *AddWorkspaceRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type AddWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddWorkspaceResponse) Reset() {
	*x = AddWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWorkspaceResponse) ProtoMessage() {}

func (x *AddWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*AddWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{3}
}

// ark clean
type CleanHostArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanHostArtifactsRequest) Reset() {
	*x = CleanHostArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanHostArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanHostArtifactsRequest) ProtoMessage() {}

func (x *CleanHostArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanHostArtifactsRequest.ProtoReflect.Descriptor instead.
func (*CleanHostArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{4}
}

type CleanHostArtifactsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanHostArtifactsResponse) Reset() {
	*x = CleanHostArtifactsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanHostArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanHostArtifactsResponse) ProtoMessage() {}

func (x *CleanHostArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanHostArtifactsResponse.ProtoReflect.Descriptor instead.
func (*CleanHostArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{5}
}

// ark targets list
type ListTargetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root             string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"` // workspace root
	CheckRemoteCache bool   `protobuf:"varint,2,opt,name=check_remote_cache,json=checkRemoteCache,proto3" json:"check_remote_cache,omitempty"`
}

func (x *ListTargetsRequest) Reset() {
	*x = ListTargetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetsRequest) ProtoMessage() {}

func (x *ListTargetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetsRequest.ProtoReflect.Descriptor instead.
func (*ListTargetsRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{6}
}

func (x *ListTargetsRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *ListTargetsRequest) GetCheckRemoteCache() bool {
	if x != nil {
		return x.CheckRemoteCache
	}
	return false
}

type ListTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets []*Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *ListTargetsResponse) Reset() {
	*x = ListTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTargetsResponse) ProtoMessage() {}

func (x *ListTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTargetsResponse.ProtoReflect.Descriptor instead.
func (*ListTargetsResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{7}
}

func (x *ListTargetsResponse) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// ark artifacts pull
type PullArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"` // workspace root
}

func (x *PullArtifactsRequest) Reset() {
	*x = PullArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullArtifactsRequest) ProtoMessage() {}

func (x *PullArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullArtifactsRequest.ProtoReflect.Descriptor instead.
func (*PullArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{8}
}

func (x *PullArtifactsRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// ark artifacts push
type PushArtifactsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"` // workspace root
}

func (x *PushArtifactsRequest) Reset() {
	*x = PushArtifactsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushArtifactsRequest) ProtoMessage() {}

func (x *PushArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushArtifactsRequest.ProtoReflect.Descriptor instead.
func (*PushArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{9}
}

func (x *PushArtifactsRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

// ark run
type RunTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root             string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"` // workspace root
	Address          string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Force            bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Push             bool   `protobuf:"varint,4,opt,name=push,proto3" json:"push,omitempty"`
	Pull             bool   `protobuf:"varint,5,opt,name=pull,proto3" json:"pull,omitempty"`
	Watch            bool   `protobuf:"varint,6,opt,name=watch,proto3" json:"watch,omitempty"`
	StopOnFirstError bool   `protobuf:"varint,7,opt,name=stop_on_first_error,json=stopOnFirstError,proto3" json:"stop_on_first_error,omitempty"`
	Args             string `protobuf:"bytes,8,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *RunTargetRequest) Reset() {
	*x = RunTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunTargetRequest) ProtoMessage() {}

func (x *RunTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunTargetRequest.ProtoReflect.Descriptor instead.
func (*RunTargetRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{10}
}

func (x *RunTargetRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *RunTargetRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RunTargetRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *RunTargetRequest) GetPush() bool {
	if x != nil {
		return x.Push
	}
	return false
}

func (x *RunTargetRequest) GetPull() bool {
	if x != nil {
		return x.Pull
	}
	return false
}

func (x *RunTargetRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *RunTargetRequest) GetStopOnFirstError() bool {
	if x != nil {
		return x.StopOnFirstError
	}
	return false
}

func (x *RunTargetRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

// ark shutdown -- does not exist yet
type ShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownRequest) Reset() {
	*x = ShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownRequest) ProtoMessage() {}

func (x *ShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownRequest.ProtoReflect.Descriptor instead.
func (*ShutdownRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{11}
}

type ShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ShutdownResponse) Reset() {
	*x = ShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutdownResponse) ProtoMessage() {}

func (x *ShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutdownResponse.ProtoReflect.Descriptor instead.
func (*ShutdownResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{12}
}

// ark validate workspace -- does not exist yet
type ValidateWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *ValidateWorkspaceRequest) Reset() {
	*x = ValidateWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateWorkspaceRequest) ProtoMessage() {}

func (x *ValidateWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*ValidateWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateWorkspaceRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

type ValidateWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ValidateWorkspaceResponse) Reset() {
	*x = ValidateWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateWorkspaceResponse) ProtoMessage() {}

func (x *ValidateWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*ValidateWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{14}
}

// ark watch -- does not exist yet
type WatchWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *WatchWorkspaceRequest) Reset() {
	*x = WatchWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_host_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchWorkspaceRequest) ProtoMessage() {}

func (x *WatchWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_host_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*WatchWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_host_server_proto_rawDescGZIP(), []int{15}
}

func (x *WatchWorkspaceRequest) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

var File_host_server_proto protoreflect.FileDescriptor

var file_host_server_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x22, 0x27, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc7, 0x01, 0x0a, 0x06, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6c, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x16,
	0x0a, 0x14, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x56, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x44, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22,
	0x2a, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x2a, 0x0a, 0x14, 0x50,
	0x75, 0x73, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x6f,
	0x70, 0x4f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x32, 0xa5, 0x06, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x12, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x0d,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c,
	0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x49, 0x0a, 0x08, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x2e, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x3b,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_host_server_proto_rawDescOnce sync.Once
	file_host_server_proto_rawDescData = file_host_server_proto_rawDesc
)

func file_host_server_proto_rawDescGZIP() []byte {
	file_host_server_proto_rawDescOnce.Do(func() {
		file_host_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_host_server_proto_rawDescData)
	})
	return file_host_server_proto_rawDescData
}

var file_host_server_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_host_server_proto_goTypes = []interface{}{
	(*LogStreamResponse)(nil),          // 0: host_server.LogStreamResponse
	(*Target)(nil),                     // 1: host_server.Target
	(*AddWorkspaceRequest)(nil),        // 2: host_server.AddWorkspaceRequest
	(*AddWorkspaceResponse)(nil),       // 3: host_server.AddWorkspaceResponse
	(*CleanHostArtifactsRequest)(nil),  // 4: host_server.CleanHostArtifactsRequest
	(*CleanHostArtifactsResponse)(nil), // 5: host_server.CleanHostArtifactsResponse
	(*ListTargetsRequest)(nil),         // 6: host_server.ListTargetsRequest
	(*ListTargetsResponse)(nil),        // 7: host_server.ListTargetsResponse
	(*PullArtifactsRequest)(nil),       // 8: host_server.PullArtifactsRequest
	(*PushArtifactsRequest)(nil),       // 9: host_server.PushArtifactsRequest
	(*RunTargetRequest)(nil),           // 10: host_server.RunTargetRequest
	(*ShutdownRequest)(nil),            // 11: host_server.ShutdownRequest
	(*ShutdownResponse)(nil),           // 12: host_server.ShutdownResponse
	(*ValidateWorkspaceRequest)(nil),   // 13: host_server.ValidateWorkspaceRequest
	(*ValidateWorkspaceResponse)(nil),  // 14: host_server.ValidateWorkspaceResponse
	(*WatchWorkspaceRequest)(nil),      // 15: host_server.WatchWorkspaceRequest
}
var file_host_server_proto_depIdxs = []int32{
	1,  // 0: host_server.ListTargetsResponse.targets:type_name -> host_server.Target
	4,  // 1: host_server.Host.CleanHostArtifacts:input_type -> host_server.CleanHostArtifactsRequest
	8,  // 2: host_server.Host.PullArtifacts:input_type -> host_server.PullArtifactsRequest
	9,  // 3: host_server.Host.PushArtifacts:input_type -> host_server.PushArtifactsRequest
	6,  // 4: host_server.Host.ListTargets:input_type -> host_server.ListTargetsRequest
	10, // 5: host_server.Host.RunTarget:input_type -> host_server.RunTargetRequest
	2,  // 6: host_server.Host.AddWorkspace:input_type -> host_server.AddWorkspaceRequest
	13, // 7: host_server.Host.ValidateWorkspace:input_type -> host_server.ValidateWorkspaceRequest
	15, // 8: host_server.Host.WatchWorkspace:input_type -> host_server.WatchWorkspaceRequest
	11, // 9: host_server.Host.Shutdown:input_type -> host_server.ShutdownRequest
	5,  // 10: host_server.Host.CleanHostArtifacts:output_type -> host_server.CleanHostArtifactsResponse
	0,  // 11: host_server.Host.PullArtifacts:output_type -> host_server.LogStreamResponse
	0,  // 12: host_server.Host.PushArtifacts:output_type -> host_server.LogStreamResponse
	7,  // 13: host_server.Host.ListTargets:output_type -> host_server.ListTargetsResponse
	0,  // 14: host_server.Host.RunTarget:output_type -> host_server.LogStreamResponse
	3,  // 15: host_server.Host.AddWorkspace:output_type -> host_server.AddWorkspaceResponse
	14, // 16: host_server.Host.ValidateWorkspace:output_type -> host_server.ValidateWorkspaceResponse
	0,  // 17: host_server.Host.WatchWorkspace:output_type -> host_server.LogStreamResponse
	12, // 18: host_server.Host.Shutdown:output_type -> host_server.ShutdownResponse
	10, // [10:19] is the sub-list for method output_type
	1,  // [1:10] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_host_server_proto_init() }
func file_host_server_proto_init() {
	if File_host_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_host_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanHostArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CleanHostArtifactsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushArtifactsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_host_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_host_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_host_server_proto_goTypes,
		DependencyIndexes: file_host_server_proto_depIdxs,
		MessageInfos:      file_host_server_proto_msgTypes,
	}.Build()
	File_host_server_proto = out.File
	file_host_server_proto_rawDesc = nil
	file_host_server_proto_goTypes = nil
	file_host_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HostClient interface {
	CleanHostArtifacts(ctx context.Context, in *CleanHostArtifactsRequest, opts ...grpc.CallOption) (*CleanHostArtifactsResponse, error)
	PullArtifacts(ctx context.Context, in *PullArtifactsRequest, opts ...grpc.CallOption) (Host_PullArtifactsClient, error)
	PushArtifacts(ctx context.Context, in *PushArtifactsRequest, opts ...grpc.CallOption) (Host_PushArtifactsClient, error)
	ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error)
	RunTarget(ctx context.Context, in *RunTargetRequest, opts ...grpc.CallOption) (Host_RunTargetClient, error)
	AddWorkspace(ctx context.Context, in *AddWorkspaceRequest, opts ...grpc.CallOption) (*AddWorkspaceResponse, error)
	ValidateWorkspace(ctx context.Context, in *ValidateWorkspaceRequest, opts ...grpc.CallOption) (*ValidateWorkspaceResponse, error)
	WatchWorkspace(ctx context.Context, in *WatchWorkspaceRequest, opts ...grpc.CallOption) (Host_WatchWorkspaceClient, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) CleanHostArtifacts(ctx context.Context, in *CleanHostArtifactsRequest, opts ...grpc.CallOption) (*CleanHostArtifactsResponse, error) {
	out := new(CleanHostArtifactsResponse)
	err := c.cc.Invoke(ctx, "/host_server.Host/CleanHostArtifacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) PullArtifacts(ctx context.Context, in *PullArtifactsRequest, opts ...grpc.CallOption) (Host_PullArtifactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[0], "/host_server.Host/PullArtifacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostPullArtifactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_PullArtifactsClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type hostPullArtifactsClient struct {
	grpc.ClientStream
}

func (x *hostPullArtifactsClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) PushArtifacts(ctx context.Context, in *PushArtifactsRequest, opts ...grpc.CallOption) (Host_PushArtifactsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[1], "/host_server.Host/PushArtifacts", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostPushArtifactsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_PushArtifactsClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type hostPushArtifactsClient struct {
	grpc.ClientStream
}

func (x *hostPushArtifactsClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*ListTargetsResponse, error) {
	out := new(ListTargetsResponse)
	err := c.cc.Invoke(ctx, "/host_server.Host/ListTargets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) RunTarget(ctx context.Context, in *RunTargetRequest, opts ...grpc.CallOption) (Host_RunTargetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[2], "/host_server.Host/RunTarget", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostRunTargetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_RunTargetClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type hostRunTargetClient struct {
	grpc.ClientStream
}

func (x *hostRunTargetClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) AddWorkspace(ctx context.Context, in *AddWorkspaceRequest, opts ...grpc.CallOption) (*AddWorkspaceResponse, error) {
	out := new(AddWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/host_server.Host/AddWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) ValidateWorkspace(ctx context.Context, in *ValidateWorkspaceRequest, opts ...grpc.CallOption) (*ValidateWorkspaceResponse, error) {
	out := new(ValidateWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/host_server.Host/ValidateWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) WatchWorkspace(ctx context.Context, in *WatchWorkspaceRequest, opts ...grpc.CallOption) (Host_WatchWorkspaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Host_serviceDesc.Streams[3], "/host_server.Host/WatchWorkspace", opts...)
	if err != nil {
		return nil, err
	}
	x := &hostWatchWorkspaceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Host_WatchWorkspaceClient interface {
	Recv() (*LogStreamResponse, error)
	grpc.ClientStream
}

type hostWatchWorkspaceClient struct {
	grpc.ClientStream
}

func (x *hostWatchWorkspaceClient) Recv() (*LogStreamResponse, error) {
	m := new(LogStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hostClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/host_server.Host/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServer is the server API for Host service.
type HostServer interface {
	CleanHostArtifacts(context.Context, *CleanHostArtifactsRequest) (*CleanHostArtifactsResponse, error)
	PullArtifacts(*PullArtifactsRequest, Host_PullArtifactsServer) error
	PushArtifacts(*PushArtifactsRequest, Host_PushArtifactsServer) error
	ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error)
	RunTarget(*RunTargetRequest, Host_RunTargetServer) error
	AddWorkspace(context.Context, *AddWorkspaceRequest) (*AddWorkspaceResponse, error)
	ValidateWorkspace(context.Context, *ValidateWorkspaceRequest) (*ValidateWorkspaceResponse, error)
	WatchWorkspace(*WatchWorkspaceRequest, Host_WatchWorkspaceServer) error
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
}

// UnimplementedHostServer can be embedded to have forward compatible implementations.
type UnimplementedHostServer struct {
}

func (*UnimplementedHostServer) CleanHostArtifacts(context.Context, *CleanHostArtifactsRequest) (*CleanHostArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanHostArtifacts not implemented")
}
func (*UnimplementedHostServer) PullArtifacts(*PullArtifactsRequest, Host_PullArtifactsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullArtifacts not implemented")
}
func (*UnimplementedHostServer) PushArtifacts(*PushArtifactsRequest, Host_PushArtifactsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushArtifacts not implemented")
}
func (*UnimplementedHostServer) ListTargets(context.Context, *ListTargetsRequest) (*ListTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTargets not implemented")
}
func (*UnimplementedHostServer) RunTarget(*RunTargetRequest, Host_RunTargetServer) error {
	return status.Errorf(codes.Unimplemented, "method RunTarget not implemented")
}
func (*UnimplementedHostServer) AddWorkspace(context.Context, *AddWorkspaceRequest) (*AddWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspace not implemented")
}
func (*UnimplementedHostServer) ValidateWorkspace(context.Context, *ValidateWorkspaceRequest) (*ValidateWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateWorkspace not implemented")
}
func (*UnimplementedHostServer) WatchWorkspace(*WatchWorkspaceRequest, Host_WatchWorkspaceServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkspace not implemented")
}
func (*UnimplementedHostServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}

func RegisterHostServer(s *grpc.Server, srv HostServer) {
	s.RegisterService(&_Host_serviceDesc, srv)
}

func _Host_CleanHostArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanHostArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).CleanHostArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host_server.Host/CleanHostArtifacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).CleanHostArtifacts(ctx, req.(*CleanHostArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_PullArtifacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullArtifactsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).PullArtifacts(m, &hostPullArtifactsServer{stream})
}

type Host_PullArtifactsServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type hostPullArtifactsServer struct {
	grpc.ServerStream
}

func (x *hostPullArtifactsServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_PushArtifacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushArtifactsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).PushArtifacts(m, &hostPushArtifactsServer{stream})
}

type Host_PushArtifactsServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type hostPushArtifactsServer struct {
	grpc.ServerStream
}

func (x *hostPushArtifactsServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host_server.Host/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ListTargets(ctx, req.(*ListTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_RunTarget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunTargetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).RunTarget(m, &hostRunTargetServer{stream})
}

type Host_RunTargetServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type hostRunTargetServer struct {
	grpc.ServerStream
}

func (x *hostRunTargetServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_AddWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).AddWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host_server.Host/AddWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).AddWorkspace(ctx, req.(*AddWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_ValidateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).ValidateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host_server.Host/ValidateWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).ValidateWorkspace(ctx, req.(*ValidateWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_WatchWorkspace_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchWorkspaceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HostServer).WatchWorkspace(m, &hostWatchWorkspaceServer{stream})
}

type Host_WatchWorkspaceServer interface {
	Send(*LogStreamResponse) error
	grpc.ServerStream
}

type hostWatchWorkspaceServer struct {
	grpc.ServerStream
}

func (x *hostWatchWorkspaceServer) Send(m *LogStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Host_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/host_server.Host/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Host_serviceDesc = grpc.ServiceDesc{
	ServiceName: "host_server.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CleanHostArtifacts",
			Handler:    _Host_CleanHostArtifacts_Handler,
		},
		{
			MethodName: "ListTargets",
			Handler:    _Host_ListTargets_Handler,
		},
		{
			MethodName: "AddWorkspace",
			Handler:    _Host_AddWorkspace_Handler,
		},
		{
			MethodName: "ValidateWorkspace",
			Handler:    _Host_ValidateWorkspace_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Host_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullArtifacts",
			Handler:       _Host_PullArtifacts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushArtifacts",
			Handler:       _Host_PushArtifacts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunTarget",
			Handler:       _Host_RunTarget_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchWorkspace",
			Handler:       _Host_WatchWorkspace_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "host_server.proto",
}
