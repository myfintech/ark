# syntax = docker/dockerfile:experimental
FROM ${modules} as modules
FROM ${from} as build
WORKDIR /opt/app
COPY --from=modules /go/pkg/mod /go/pkg/mod
COPY --from=modules /opt/app /opt/app

COPY ./ ./

ENV CGO_ENABLED=0
RUN go mod vendor

RUN go generate ./...

# platforms = ["linux", "darwin"]
%{ for platform in platforms ~}
# Compile binary for ${platform}
RUN --mount=type=cache,target=/root/.cache \
  GOOS=${platform} go build -o ${package.name}-${platform} \
  %{ if package.version != "" ~}
    -ldflags "-X main.Version=${package.version} \
    -X main.Environment=${environment} \
    -X main.RemoteVersionURL=${latest_version_base_url}/${package.name}-${platform}.json \
    -X main.LatestDownloadURL=${latest_download_base_url}/${package.name}-${platform}" \
  %{ endif ~}
    ./src/go/tools/${package.name}/*.go
%{ endfor ~}

%{ if package.version ~}
  %{ for platform in platforms ~}
# Generate package information for this binary
# Which is published to a CDN for installation
RUN pkginfo \
    -pretty \
    -version=${package.version} \
    -environment=${environment} \
    -hash=$(checksum ${package.name}-${platform}) \
    -remote_version_url=${latest_version_base_url}/${package.name}-${platform}.json \
    -latest_download_url=${latest_download_base_url}/${package.name}-${platform} \
    > ${package.name}-${platform}.json
  %{ endfor ~}
%{ endif ~}

FROM scratch as output
COPY --from=build /opt/app/${package.name}* .